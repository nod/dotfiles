#!/usr/bin/env python

import re

COLOR_FMTS = [
    u'\033[1;46m{}\033[1;m',  # bg cyan
    u'\033[1;43m{}\033[1;m',  # bg brown
    u'\033[1;47m{}\033[1;m',  # bg gray
    u'\033[1;45m{}\033[1;m',  # bg magenta
    u'\033[1;41m{}\033[1;m',  # bg red
    u'\033[1;44m{}\033[1;m',  # bg blue
    u'\033[1;42m{}\033[1;m',  # bg green
    u'\033[1;48m{}\033[1;m',  # bg crimson
    u'\033[1;31m{}\033[1;m',  # red
    u'\033[1;32m{}\033[1;m',  # green
    u'\033[1;33m{}\033[1;m',  # yellow
    u'\033[1;34m{}\033[1;m',  # blue
    u'\033[1;35m{}\033[1;m',  # magenta
    u'\033[1;36m{}\033[1;m',  # cyan
    u'\033[1;37m{}\033[1;m',  # white
    u'\033[1;38m{}\033[1;m',  # crimson
    u'\033[1;30m{}\033[1;m',  # gray
    ]


def _replace_color(match_obj):
    # for each match, calculate (newstr, start, end) and then in reverse order,
    # rip through those creating a new string so that we work on the end of the
    # string first and don't disturb our start/end indexes
    matches = []
    retv = match_obj.string[match_obj.start():match_obj.end()]
    if match_obj.lastindex:
        # we had regex match groups requested
        for i in range(match_obj.lastindex, 0, -1):
            s = match_obj.group(i)
            cfmt = COLOR_FMTS[(i-1) % len(COLOR_FMTS)]
            new_str = cfmt.format(s)
            start, end = match_obj.start(i), match_obj.end(i)
            retv = retv[:start] + new_str + retv[end:]
        return retv
    else:
        # no groups, just a bare regex
        return COLOR_FMTS[0].format(match_obj.group(0))


def process_line(ln, ln_re):
    return ln_re.sub(_replace_color, ln)


epilog = r"""
Regex groups will be different colors.
ex: '\b(\w+?)(\d+)\b'
    will highlight words ending in digits with 2 different colors
"""


if __name__ == '__main__':
    import argparse
    import os
    import sys

    parser = argparse.ArgumentParser(
        description="Hilite lines based on regex.",
        epilog=epilog )
    parser.add_argument(
        'regex',
        help='a pattern containing groups to match on each line',
        type=str)
    parser.add_argument(
        '--file',
        help='defaults to stdin, file to read from. special stderr available',
        type=str )
    args = parser.parse_args()
    reg = re.compile(args.regex)
    if args.file:
        if args.file == 'stderr':
            # special, let's read from stderr
            inf = sys.stderr
        else:
            inf = open(args.file)
    else:
        inf = sys.stdin

    # unbuffer stdout
    unbuff = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stdout = unbuff
    while 1:
        try:
            ln = inf.readline()
        except KeyboardInterrupt:
            break
        if not ln: break
        print(process_line(ln[:-1], reg))
